image: 
  name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
      - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' 
      - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' 
      - 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'
    
variables:
    TF_ROOT: ${CI_PROJECT_DIR}/
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/pjp
    
cache: 
    key: pjp
    paths: 
        - ${TF_ROOT}/.terraform
        
before_script:
  - cd ${TF_ROOT}

stages:
  - init
  - validate
  - plan
  - apply
  - destroy

init:
  stage: init
  script:
    - gitlab-terraform init

validate:
  stage: validate
  script:
    - gitlab-terraform validate

plan:
  stage: plan
  script:
    - chmod +x ./modules/aws-lambda/scripts/create_dependency.sh
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
      - ${TF_ROOT}/build/*
    reports:
      terraform: ${TF_ROOT}/plan.json
  only:
    - main 

apply:
  stage: apply
  script:
    - chmod +x ./modules/aws-lambda/scripts/create_dependency.sh
    - gitlab-terraform apply
  dependencies:
    - plan
  artifacts:
    name: apply
    paths: 
      - $STATE
  when: manual
  only:
    - main

destroy:
  stage: destroy
  script:
    - gitlab-terraform destroy
  dependencies:
    - apply
  when: manual 
  only:
    - main   

# image:
  # name: hashicorp/terraform:light
  # entrypoint:
    # - '/usr/bin/env'
    # - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    # - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' 
    # - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' 
    # - 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'

# variables:
  # PLAN: plan.tfplan

# before_script:
  # - rm -rf .terraform
  # - terraform --version
  # #- mkdir -p ./creds
  # #- echo $SERVICEACCOUNT | base64 -d > ./creds/serviceaccount.json
  # - terraform init

# stages:
  # - validate
  # - plan
  # - apply
  # - destroy

# validate:
  # stage: validate
  # script:
    # - terraform validate

# plan:
  # stage: plan
  # script:
    # - terraform plan -out=$PLAN
    # - ls -ld $PLAN
  # dependencies:
    # - validate
  # artifacts:
    # name: plan
    # paths:
      # - $PLAN

# apply:
  # stage: apply
  # script:
    # - terraform apply -input=false $PLAN
  # dependencies:
    # - plan
  # when: manual

# destroy:
  # stage: destroy
  # script:
    # - echo "Destroying resources"
    # - terraform destroy -state=$STATE --auto-approve
  # dependencies:
    # - apply  
  # when: manual
 
